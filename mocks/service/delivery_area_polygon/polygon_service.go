// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/aydinmuzaffer/migration-tool-service/src/migrationtool/domain"
	deliveryareapolygonservice "github.com/aydinmuzaffer/migration-tool-service/src/migrationtool/service/delivery_area_polygon"

	mock "github.com/stretchr/testify/mock"
)

// PolygonService is an autogenerated mock type for the PolygonService type
type PolygonService struct {
	mock.Mock
}

// For provides a mock function with given fields: _a0
func (_m *PolygonService) For(_a0 []domain.VendorDeliveryAreaPolygonGetModel) deliveryareapolygonservice.PolygonService {
	ret := _m.Called(_a0)

	var r0 deliveryareapolygonservice.PolygonService
	if rf, ok := ret.Get(0).(func([]domain.VendorDeliveryAreaPolygonGetModel) deliveryareapolygonservice.PolygonService); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(deliveryareapolygonservice.PolygonService)
		}
	}

	return r0
}

// GetPricingPolygons provides a mock function with given fields:
func (_m *PolygonService) GetPricingPolygons() (*[]domain.VendorDeliveryAreaPolygonInsertModel, error) {
	ret := _m.Called()

	var r0 *[]domain.VendorDeliveryAreaPolygonInsertModel
	if rf, ok := ret.Get(0).(func() *[]domain.VendorDeliveryAreaPolygonInsertModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.VendorDeliveryAreaPolygonInsertModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPolygonService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPolygonService creates a new instance of PolygonService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPolygonService(t mockConstructorTestingTNewPolygonService) *PolygonService {
	mock := &PolygonService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
